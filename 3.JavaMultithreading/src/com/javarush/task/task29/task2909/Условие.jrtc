<div class="wdghtml" taskKey="com.javarush.task.task29.task2909.big13">
<h3>Рефакторинг (13)</h3>
<p>Разберись с кодом пакета <strong><span class="text-red">user</span></strong> (<em>пользователь</em>).<br />
13.1. Извлечение метода. Добавь метод <mark>printInfo()</mark>, который будет выводить <strong>имя</strong> и <strong>фамилию</strong><br />
в консоль так же, как это делается в методе <mark>printUsers()</mark>. Замени повторяющийся код<br />
метода <mark>printUsers()</mark> его вызовом.<br />
13.2. Встраивание метода. Избавься от метода <mark>ageLessThan16()</mark>.<br />
13.3. Перемещение метода. Перемести методы <mark>printInfo()</mark> и <mark>printAdditionalInfo()</mark> в класс <span class="text-corporate"><strong>User</strong></span>.<br />
13.4. Расщепление переменной. Переменная age в методе <mark>calculateAverageAge() </mark>используется для разных промежуточных значений. Перепиши метод без использования этой переменной.<br />
13.5. Удаление присваиваний параметрам. Перепиши метод <mark>calculateRate()</mark>, чтобы он не<br />
пытался менять входные параметры, а просто возвращал рассчитанное значение.</p>

<hr>
<h3>Рефакторинг (12)</h3>
<p>12.1. Объединение условных операторов.<br />
12.1.1. Добавь внутренний метод, сообщающий, могут ли быть перевезены пассажиры<br />
<mark>boolean canPassengersBeTransferred()</mark> в класс <span class="text-corporate"><strong>Car</strong></span>. Метод должен возвращать <span class="text-neon"><strong>true</strong></span>, если<br />
водитель доступен <mark>isDriverAvailable</mark> и есть топливо <mark class="user">fuel</mark>.<br />
12.1.2. Перепиши метод <mark>getNumberOfPassengersCanBeTransferred()</mark>, объединив условные<br />
операторы (<em>используй метод</em> <mark>canPassengersBeTransferred()</mark>).<br />
12.2. Объединение дублирующихся фрагментов в условных операторах. Перепиши метод<br />
<mark>startMoving()</mark>, чтобы в нем не было повторяющихся вызовов функций.<br />
12.3. Замена магического числа символьной константой. Замени магические числа в методе<br />
<mark>getMaxSpeed()</mark> на константные переменные метода: <mark class="green">MAX_TRUCK_SPEED</mark>,<br />
<mark class="green">MAX_SEDAN_SPEED</mark> и <mark class="green">MAX_CABRIOLET_SPEED</mark>.<br />
12.4. Замена условного оператора полиморфизмом.<br />
12.4.1. Переопредели метод <mark>getMaxSpeed()</mark> в подклассах, избавившись от условного оператора.<br />
12.4.2. Метод <mark>getMaxSpeed()</mark> в классе <span class="text-corporate"><strong>Car</strong></span> сделай абстрактным.</p>

<hr>
<h3>Рефакторинг (11)</h3>
<p>11.1. Замена кода ошибки исключением. Перепиши метод заправиться <mark>fill(double</mark><br />
<mark><strong> numberOfLiters</strong>)</mark>, чтобы он в случае ошибки кидал исключение <mark class="green">Exception</mark>.<br />
11.2. Разбиение условного оператора.<br />
11.2.1. Добавь и реализуй метод в классе <strong><span class="text-corporate">Car</span></strong>, определяющий относится ли переданная дата к<br />
лету: <mark>boolean isSummer(Date <strong>date</strong> , Date <strong>summerStart</strong>, Date <strong>summerEnd</strong>)</mark>.<br />
11.2.2. Добавь и реализуй метод, рассчитывающий расход топлива зимой: <mark>double</mark><br />
<mark> getWinterConsumption(int <strong>length</strong>)</mark>.<br />
11.2.3. Добавь и реализуй метод, рассчитывающий расход топлива летом: <mark>double</mark><br />
<mark> getSummerConsumption(int <strong>length</strong>)</mark>.<br />
11.2.4. Перепиши метод <mark>getTripConsumption()</mark>, используя новые методы.</p>

<hr>
<h3>Рефакторинг (10)</h3>
<p>Разберись с кодом в пакете <strong><span class="text-red">car</span></strong> (<em><strong>машина</strong></em>).<br />
10.1. Замена конструктора фабричным методом.<br />
10.1.1. Объяви классы <strong><span class="text-corporate">Truck</span></strong> (<strong>грузовик</strong>), <strong><span class="text-corporate">Sedan</span></strong> (<strong>седан</strong>) и <span class="text-corporate"><strong>Cabriolet</strong></span> (<strong>кабриолет</strong>), унаследованные от <strong><span class="text-corporate">Car</span></strong>.<br />
10.1.2. Добавь в них конструкторы, принимающие <mark>int numberOfPassengers</mark>.<br />
10.1.3. Добавь фабричный статический метод <mark>Car create(int type, int <strong>numberOfPassengers</strong>)</mark> в класс <strong><span class="text-corporate">Car</span></strong> и реализуй его.<br />
10.1.4. Измени область видимости конструктора класса <span class="text-corporate"><strong>Car</strong></span>.</p>

<hr>
<h3>Рефакторинг (9)</h3>
<p>9.1. Самоинкапсуляция поля. Перепиши метод <mark>incAverageGrade()</mark> используя <strong>сеттер</strong> и <strong>геттер</strong> для доступа к <mark class="green">averageGrade</mark>.<br />
9.2. Замена поля-массива объектом. Замени массив <mark class="user">int[] size</mark> объектом нового типа <strong><span class="text-corporate">Size</span></strong>,<br />
содержащим публичные поля: рост <span class="text-corporate">int</span> <mark class="user">height</mark> и вес <span class="text-corporate">int</span> <mark class="user">weight</mark>. Публичный класс <strong><span class="text-corporate">Size</span></strong> объяви<br />
внутри класса <strong><span class="text-corporate">Human</span></strong>.<br />
9.3. Инкапсуляция поля. Сокрой поле company в классе <strong><span class="text-corporate">Worker</span></strong>. Добавь <strong>сеттер</strong> и <strong>геттер</strong> для него.<br />
9.4. Замена кодирования типа классом.<br />
9.4.1. Объяви публичный класс группы крови <strong><span class="text-corporate">BloodGroup</span></strong> внутри пакета <strong><span class="text-red">human</span></strong>.<br />
9.4.2. Добавь в класс <strong><span class="text-corporate">BloodGroup</span></strong> приватное константное поле <span class="text-corporate">int</span> <mark class="user">code</mark>, приватный конструктор,<br />
принимающий <span class="text-corporate">int</span> и инициализирующий поле <mark class="user">code</mark>, <strong>геттер</strong> для поля класса.<br />
9.4.3. Добавь в класс <strong><span class="text-corporate">BloodGroup</span></strong> статические методы <mark>first()</mark>, <mark>second()</mark>, <mark>third()</mark> и <mark>fourth()</mark>,<br />
создающие и возвращающие объекты типа BloodGroup с правильным кодом внутри (<strong>1</strong>, <strong>2</strong>, <strong>3</strong> и <strong>4</strong> соответственно).<br />
9.4.4. Примени в классе <span class="text-corporate"><strong>Human</strong></span> новый тип <strong><span class="text-corporate">BloodGroup</span></strong>.</p>

<hr>
<h3>Рефакторинг (8)</h3>
<p>8.1. Удаление сеттера. Удали метод <mark>setId()</mark>. Поле <mark class="user">id</mark> должно устанавливаться только в момент<br />
создания объекта.<br />
8.2. Сокрытие метода (<em><strong>поля</strong></em>). Изменить область видимости поля <mark class="user">nextId</mark> в соответствии с<br />
областью его использования.<br />
8.3. Замена исключения проверкой условия. Перепиши метод <mark>removeStudent(int <strong>index</strong>)</mark>, чтобы<br />
он удалял студента из списка студентов только, если он там есть. Метод не должен кидать<br />
исключение.<br />
8.4. Удаление управляющего флага. Перепиши метод <mark>findDimaOrSasha()</mark>, сохранив логику его<br />
работы. В методе не должны использоваться флаги типа <span class="text-corporate">found</span>, воспользуйся оператором<br />
<mark>break</mark>.</p>

</div>
